{"version":3,"file":"static/js/908.e9c862b9.chunk.js","mappings":"8PAAaA,EAAgB,SAAAC,GAC3B,OAAOA,EAAKC,KAAI,kBAAiD,CAC/DC,GADc,EAAGC,QAEjBC,KAFc,EAAYA,KAG1BC,IAHc,EAAkBC,aAIhCC,UAJc,EAAgCA,UAAhC,GAMjB,ECJKC,EAAU,mCAGhB,aAAO,OAAP,oBAAO,WAA8BC,GAA9B,wFACkBC,EAAAA,EAAAA,IAAM,UAAD,OAAWD,EAAX,YAA8B,CACxDE,OAAQ,CACNC,QAASJ,KAHR,cACCK,EADD,yBAMEd,EAAcc,EAASb,KAAKc,OAN9B,kEAFPJ,EAAAA,GAAAA,SAAAA,QAAyB,+B,aC+CzB,EA9CiB,WACf,OAAwBK,EAAAA,EAAAA,UAAS,IAAjC,eAAOD,EAAP,KAAaE,EAAb,KACA,GAA0BD,EAAAA,EAAAA,UAAS,MAAnC,eAAOE,EAAP,KAAcC,EAAd,KACA,GAAkCH,EAAAA,EAAAA,WAAS,GAA3C,eAAOI,EAAP,KAAkBC,EAAlB,KACQX,GAAYY,EAAAA,EAAAA,MAAZZ,QAeR,OAdAa,EAAAA,EAAAA,YAAU,YDJL,SAAP,mCCKIC,CAAed,GACZe,MAAK,SAAAxB,GACJgB,EAAQhB,GACHA,EAAKyB,QACRP,GAAS,EAEZ,IACAQ,MAAMR,GACNS,SAAQ,WACPP,GAAa,EACd,GACJ,GAAE,CAACX,KAGF,iCACE,wBACGK,EAAKb,KAAI,YAAmC,IAAhCC,EAA+B,EAA/BA,GAAIE,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,IAAKE,EAAgB,EAAhBA,UAC1B,OACE,2BACE,gBACEqB,IACEvB,EAAG,0CACoCA,GACnC,2DAENwB,IAAG,UAAKzB,GACR0B,MAAM,WAER,uBAAI1B,KACJ,uCAAeG,OAXRL,EAcZ,MAEFe,IAAS,8DACTE,IAAa,SAACY,EAAA,EAAD,MAGnB,C","sources":["helpers/transformCast.js","services/fetchMovieCast.js","pages/CastPage/CastPage.jsx"],"sourcesContent":["export const transformCast = data => {\n  return data.map(({ cast_id, name, profile_path, character }) => ({\n    id: cast_id,\n    name,\n    img: profile_path,\n    character,\n  }));\n};\n","import axios from 'axios';\nimport { transformCast } from 'helpers/transformCast';\n\nconst API_KEY = '89e906a95928d3d1981707d668e671c3';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport async function fetchMovieCast(movieId) {\n  const response = await axios(`/movie/${movieId}/credits`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return transformCast(response.data.cast);\n}\n","import { Loader } from 'components/Loader/Loader';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCast } from 'services/fetchMovieCast';\n\nconst CastPage = () => {\n  const [cast, setCast] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n  useEffect(() => {\n    fetchMovieCast(movieId)\n      .then(data => {\n        setCast(data);\n        if (!data.length) {\n          setError(true);\n        }\n      })\n      .catch(setError)\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [movieId]);\n\n  return (\n    <>\n      <ul>\n        {cast.map(({ id, name, img, character }) => {\n          return (\n            <li key={id}>\n              <img\n                src={\n                  img\n                    ? `https://image.tmdb.org/t/p/w500/${img}`\n                    : 'https://www.freeiconspng.com/uploads/no-image-icon-7.gif'\n                }\n                alt={`${name}`}\n                width=\"100px\"\n              />\n              <p>{name}</p>\n              <p>Character: {character}</p>\n            </li>\n          );\n        })}\n      </ul>\n      {error && <p>There are no cast for this movie. </p>}\n      {isLoading && <Loader />}\n    </>\n  );\n};\n\nexport default CastPage;\n"],"names":["transformCast","data","map","id","cast_id","name","img","profile_path","character","API_KEY","movieId","axios","params","api_key","response","cast","useState","setCast","error","setError","isLoading","setIsLoading","useParams","useEffect","fetchMovieCast","then","length","catch","finally","src","alt","width","Loader"],"sourceRoot":""}