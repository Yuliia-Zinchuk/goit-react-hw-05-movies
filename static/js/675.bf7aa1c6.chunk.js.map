{"version":3,"file":"static/js/675.bf7aa1c6.chunk.js","mappings":"gRAIMA,EAAU,mCA0CT,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAiCC,GAAjC,wFACkBC,EAAAA,EAAAA,IAAM,gBAAiB,CAC5CC,OAAQ,CACNC,QAASL,EACTM,KAAM,GACNJ,MAAAA,KALC,cACCK,EADD,yBAQEA,EAASC,KAAKC,SARhB,kEAxCPN,EAAAA,GAAAA,SAAAA,QAAyB,+BCLzB,MAA6B,+BAA7B,EAAwE,8B,SCwExE,EAjEmB,WACjB,OAA4BO,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAuCC,EAAAA,EAAAA,MAAvC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAaF,EAAaG,IAAI,SACpC,GAA0BP,EAAAA,EAAAA,WAAS,GAAnC,eAAOQ,EAAP,KAAcC,EAAd,KACA,GAAkCT,EAAAA,EAAAA,WAAS,GAA3C,eAAOU,EAAP,KAAkBC,EAAlB,MAEAC,EAAAA,EAAAA,YAAU,WAAM,wCAGd,qFACED,GAAa,GADf,SAEQpB,EAAkBe,GACrBO,MAAK,SAAAf,GACJI,EAAUJ,GACLA,EAAKgB,QACRL,GAAS,EAEZ,IACAM,MAAMN,GACNO,SAAQ,WACPL,GAAa,EACd,IAZL,4CAHc,sBACK,OAAfL,GAAsC,KAAfA,GADb,mCAiBdW,EACD,GAAE,CAACX,IAgBJ,OACE,iCACE,kBAAMY,SAhBW,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,OAEf,GAAyC,KAArCD,EAAKE,SAAS/B,MAAMgC,MAAMC,OAC5B,OAAOC,EAAAA,GAAAA,QAAc,+BAGvBrB,EAAe,CAAEb,MAAO6B,EAAKE,SAAS/B,MAAMgC,QAE5CH,EAAKM,QACLlB,GAAS,EACV,EAIG,WACE,kBACEmB,UAAWC,EACXC,KAAK,OACLC,KAAK,QACLC,aAAa,MAEbC,YAAY,mBAGd,mBAAQL,UAAWC,EAAeC,KAAK,SAAvC,uBAKD7B,IAAU,SAACiC,EAAA,EAAD,CAAYjC,OAAQA,IAC9BO,IAAS,gFACTE,IAAa,SAACyB,EAAA,EAAD,MAGnB,C","sources":["services/fetchMovieByQuery.js","webpack://react-homework-template/./src/pages/MoviesPage/MoviesPage.module.css?7ea7","pages/MoviesPage/MoviesPage.jsx"],"sourcesContent":["import axios from 'axios';\n//import { transformCast } from 'helpers/transformCast';\n\n//import { transformReviews } from 'helpers/transformReviews';\nconst API_KEY = '89e906a95928d3d1981707d668e671c3';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\n// export async function fetchMoviesPopular() {\n//   const response = await axios('/trending/movie/week', {\n//     params: {\n//       api_key: API_KEY,\n//       size: 20,\n//     },\n//   });\n//   return response.data.results;\n// }\n\n// export async function fetchMovieById(movieId) {\n//   const response = await axios(`/movie/${movieId}`, {\n//     params: {\n//       api_key: API_KEY,\n//     },\n//   });\n\n//   return response.data;\n// }\n\n// export async function fetchMovieCast(movieId) {\n//   const response = await axios(`/movie/${movieId}/credits`, {\n//     params: {\n//       api_key: API_KEY,\n//     },\n//   });\n//   return transformCast(response.data.cast);\n// }\n\n// export async function fetchMovieReviews(movieId) {\n//   const response = await axios(`/movie/${movieId}/reviews`, {\n//     params: {\n//       api_key: API_KEY,\n//     },\n//   });\n//   return transformReviews(response.data.results);\n// }\n\nexport async function fetchMovieByQuery(query) {\n  const response = await axios(`/search/movie`, {\n    params: {\n      api_key: API_KEY,\n      size: 20,\n      query,\n    },\n  });\n  return response.data.results;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"inputMovie\":\"MoviesPage_inputMovie__5zmdW\",\"btnSearch\":\"MoviesPage_btnSearch__wYYaN\"};","import { toast } from 'react-toastify';\nimport { Loader } from 'components/Loader/Loader';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\nimport { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom/dist';\nimport { fetchMovieByQuery } from 'services/fetchMovieByQuery';\nimport css from './MoviesPage.module.css';\n\nconst MoviesPage = () => {\n  const [movies, setMovies] = useState(null);\n  const [searchParams, setSeachParams] = useSearchParams();\n  const queryMovie = searchParams.get('query');\n  const [error, setError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (queryMovie === null || queryMovie === '') return;\n\n    async function fetchMovies() {\n      setIsLoading(true);\n      await fetchMovieByQuery(queryMovie)\n        .then(data => {\n          setMovies(data);\n          if (!data.length) {\n            setError(true);\n          }\n        })\n        .catch(setError)\n        .finally(() => {\n          setIsLoading(false);\n        });\n    }\n    fetchMovies();\n  }, [queryMovie]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.target;\n\n    if (form.elements.query.value.trim() === '') {\n      return toast.warning('Please, enter your request!');\n    }\n\n    setSeachParams({ query: form.elements.query.value });\n\n    form.reset();\n    setError(false);\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input\n          className={css.inputMovie}\n          type=\"text\"\n          name=\"query\"\n          autoComplete=\"off\"\n          // autoFocus\n          placeholder=\"Search movies\"\n        />\n\n        <button className={css.btnSearch} type=\"submit\">\n          Search\n        </button>\n      </form>\n\n      {movies && <MoviesList movies={movies} />}\n      {error && <p>Sorry, no results for your request. Please try again</p>}\n      {isLoading && <Loader />}\n    </>\n  );\n};\n\nexport default MoviesPage;\n//   className={css.SearchForm_input}\n//   className={css.SearchForm_button}\n"],"names":["API_KEY","fetchMovieByQuery","query","axios","params","api_key","size","response","data","results","useState","movies","setMovies","useSearchParams","searchParams","setSeachParams","queryMovie","get","error","setError","isLoading","setIsLoading","useEffect","then","length","catch","finally","fetchMovies","onSubmit","e","preventDefault","form","target","elements","value","trim","toast","reset","className","css","type","name","autoComplete","placeholder","MoviesList","Loader"],"sourceRoot":""}