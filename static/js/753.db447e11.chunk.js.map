{"version":3,"file":"static/js/753.db447e11.chunk.js","mappings":"8PAAaA,EAAmB,SAAAC,GAC9B,OAAOA,EAAKC,KAAI,kBAA8B,CAC5CC,GADc,EAAGA,GAEjBC,OAFc,EAAOA,OAGrBC,QAHc,EAAeA,QAAf,GAKjB,ECHKC,EAAU,mCAIhB,aAAO,OAAP,oBAAO,WAAiCC,GAAjC,wFACkBC,EAAAA,EAAAA,IAAM,UAAD,OAAWD,EAAX,YAA8B,CACxDE,OAAQ,CACNC,QAASJ,KAHR,cACCK,EADD,yBAMEX,EAAiBW,EAASV,KAAKW,UANjC,kEAFPJ,EAAAA,GAAAA,SAAAA,QAAyB,+B,aCwCzB,EAxCoB,WAClB,OAA4BK,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,WAAS,GAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KACQZ,GAAYa,EAAAA,EAAAA,MAAZb,QAgBR,OAfAc,EAAAA,EAAAA,YAAU,WACRF,GAAa,GDJV,SAAP,kCCKIG,CAAkBf,GACfgB,MAAK,SAAAtB,GACJc,EAAUd,GACLA,EAAKuB,QACRP,GAAS,EAEZ,IACAQ,MAAMR,GACNS,SAAQ,WACPP,GAAa,EACd,GACJ,GAAE,CAACZ,KAGF,gCACGO,IACC,wBACGA,EAAOZ,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzB,OACE,2BACE,wBAAKD,KACL,uBAAIC,MAFGF,EAKZ,MAIJa,IAAS,sEACTE,IAAa,SAACS,EAAA,EAAD,MAGnB,C","sources":["helpers/transformReviews.js","services/fetchMovieReviews.js","pages/ReviewsPage/ReviewsPage.jsx"],"sourcesContent":["export const transformReviews = data => {\n  return data.map(({ id, author, content }) => ({\n    id,\n    author,\n    content,\n  }));\n};\n","import axios from 'axios';\nimport { transformReviews } from 'helpers/transformReviews';\n\nconst API_KEY = '89e906a95928d3d1981707d668e671c3';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport async function fetchMovieReviews(movieId) {\n  const response = await axios(`/movie/${movieId}/reviews`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return transformReviews(response.data.results);\n}\n","import { Loader } from 'components/Loader/Loader';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieReviews } from 'services/fetchMovieReviews';\n\nconst ReviewsPage = () => {\n  const [review, setReview] = useState(null);\n  const [error, setError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n  useEffect(() => {\n    setIsLoading(true);\n    fetchMovieReviews(movieId)\n      .then(data => {\n        setReview(data);\n        if (!data.length) {\n          setError(true);\n        }\n      })\n      .catch(setError)\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [movieId]);\n  // console.log(review);\n  return (\n    <>\n      {review && (\n        <ul>\n          {review.map(({ id, author, content }) => {\n            return (\n              <li key={id}>\n                <h3>{author}</h3>\n                <p>{content}</p>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n\n      {error && <p>We don't have any reviews for this movie. </p>}\n      {isLoading && <Loader />}\n    </>\n  );\n};\nexport default ReviewsPage;\n"],"names":["transformReviews","data","map","id","author","content","API_KEY","movieId","axios","params","api_key","response","results","useState","review","setReview","error","setError","isLoading","setIsLoading","useParams","useEffect","fetchMovieReviews","then","length","catch","finally","Loader"],"sourceRoot":""}